signal基本机制分析：

1.应用程序signal
	注册信号处理函数
		signal(SIGUSR1, my_signal_fun);/* SIGUSR1解决发给谁的问题*/ 
	进入休眠
2.shell把信号发给应用程序signal
	通过kill -USR1 PID命令 /*发给PID所指向的应用程序一个USR1信号量*/
3.应用程序收到USR1信号量后，通过这个信号量，跳转到该信号量对应的信号处理函数my_signal_fun去做处理。


signal机制在驱动中的应用：

为了使设备支持异步通知机制，驱动程序中涉及以下3项工作：
1. 支持F_SETOWN命令，能在这个控制命令处理中设置filp->f_owner为对应进程ID。
   不过此项工作已由内核完成，设备驱动无须处理。
2. 支持F_SETFL命令的处理，每当FASYNC标志改变时，驱动程序中的fasync()函数将得以执行。
   驱动中应该实现fasync()函数。
   
3. 在设备资源可获得时（按键时），调用kill_fasync()函数激发相应的信号
	中断处理函数irqreturn_t buttons_irq中
		kill_fasync (&button_async, SIGIO, POLL_IN);
			其中，button_async变量在应用程序中被初始化

应用程序：
打开驱动对应的设备文件 > fd = open("/dev/buttons", O_RDWR);
注册信号处理函数 > signal(SIGIO, my_signal_fun);
通过fcntl函数（根据文件描述符来操作文件的特性），初始化驱动在调用kill_fasync函数时所需的变量
	fcntl(fd, F_SETOWN, getpid());  // 告诉内核，发给谁，设置将接收SIGIO信号的进程id
	Oflags = fcntl(fd, F_GETFL);   
	fcntl(fd, F_SETFL, Oflags | FASYNC);  // 改变fasync标记，最终会调用到驱动的faync > fasync_helper：初始化/释放fasync_struct

